type: edu
custom_name: stage6
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                    ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
- name: machine/coffee_machine.py
  visible: true
  text: "import sys\n\nwater = 400\nmilk = 540\nbeans = 120\ncups = 9\nmoney = 550\n\
    \ndef showStatus():\n    print(\"The coffee machine has:\")\n    print(water,\
    \ \" of water\")\n    print(milk, \" of milk\")\n    print(beans, \" of coffee\
    \ beans\")\n    print(cups, \" of disposable cups\")\n    print(money, \" of money\"\
    )\n\ndef makeCoffee(waterNeed, milkNeed, BeansNeed, MoneySpend): \n    global\
    \ water, milk, beans, cups, money\n\n    enoughRes = True\n    if  water < waterNeed:\n\
    \        print(\"Sorry, not enough water!\")\n        enoughRes = False\n    \n\
    \    if  milk < milkNeed:\n        print(\"Sorry, not enough milk!\")\n      \
    \  enoughRes = False\n\n    if  beans < BeansNeed:\n        print(\"Sorry, not\
    \ enough coffee beans!\")\n        enoughRes = False\n\n    if  cups < 1:\n  \
    \      print(\"Sorry, not enough disposable cups!\")\n        enoughRes = False\n\
    \n    if enoughRes:\n        water -= waterNeed\n        milk -= milkNeed\n  \
    \      beans -= BeansNeed\n        money += MoneySpend\n        cups -= 1\n  \
    \      print(\"I have enough resources, making you a coffee!\")\n    \nwhile True:\n\
    \    action = input(\"Write action (buy, fill, take, remaining, exit):\")\n\n\
    \    if action == \"remaining\":\n        showStatus()\n    elif action == \"\
    buy\":\n        option = input(\"What do you want to buy? 1 - espresso, 2 - latte,\
    \ 3 - cappuccino, back - to main menu:\")\n\n        #  For one espresso, the\
    \ coffee machine needs 250 ml of water and 16 g of coffee beans. It costs $4.\n\
    \        #  For a latte, the coffee machine needs 350 ml of water, 75 ml of milk,\
    \ and 20 g of coffee beans. It costs $7.\n        #  And for a cappuccino, the\
    \ coffee machine needs 200 ml of water, 100 ml of milk, and 12 g of coffee. It\
    \ costs $6.    \n        if option == \"back\":\n            continue\n      \
    \  elif option == \"1\":\n            makeCoffee(250, 0, 16, 4)\n        elif\
    \ option == \"2\":\n            makeCoffee(350, 75, 20, 7)\n        elif option\
    \ == \"3\":\n            makeCoffee(200, 100, 12, 6)\n    elif action == \"fill\"\
    :\n        w = int(input(\"Write how many ml of water do you want to add:\"))\n\
    \        m = int(input(\"Write how many ml of milk do you want to add:\"))\n \
    \       b = int(input(\"Write how many grams of coffee beans do you want to add:\"\
    ))\n        c = int(input(\"Write how many disposable cups of coffee do you want\
    \ to add:\"))\n        water += w\n        milk += m\n        beans += b\n   \
    \     cups += c\n    elif action == \"take\":\n        print(\"I gave you $\"\
    \ + str(money))\n        money = 0\n    elif action == \"exit\":\n        exit()\n\
    \        \n"
  learner_created: false
feedback_link: https://hyperskill.org/projects/68/stages/371/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/68/stages/371/implement">JetBrains
    Academy</a>
  time: Sat, 27 Jun 2020 18:23:31 UTC
record: 5
